version: "3.8"

services:
  web:
    build:
      context: .
      dockerfile: docker/accounts/Dockerfile
    working_dir: /home/max/software/projects/Bank-DDD-CQRS-ES
    command: gunicorn --bind 0.0.0.0:4000 --worker-class=gevent --worker-connections=1000 --workers=3 bank_ddd_es_cqrs.server:app
    volumes:
      - ./:/usr/src/app/
    ports:
      - 4000:4000
    depends_on:
      - db
    env_file:
      - .env.docker.dev
    restart: always

  db:
    image: postgres:12
    volumes:
      - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/postgres/:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456789
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"
    restart: always

  zookeeper-1:
    image: confluentinc/cp-zookeeper:5.5.1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888

      # This is so that we will be able to execute commands inside the container of the zookeeper
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    volumes:
      - ./data/zookeeper/1/data/:/var/lib/zookeeper/data
      - ./data/zookeeper/1/log/:/var/lib/zookeeper/log
    restart: always

  zookeeper-2:
    image: confluentinc/cp-zookeeper:5.5.1
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888

      # This is so that we will be able to execute commands inside the container of the zookeeper
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    volumes:
      - ./data/zookeeper/2/data/:/var/lib/zookeeper/data
      - ./data/zookeeper/2/log/:/var/lib/zookeeper/log
    restart: always

  zookeeper-3:
    image: confluentinc/cp-zookeeper:5.5.1
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 42181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888

      # This is so that we will be able to execute commands inside the container of the zookeeper
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    volumes:
      - ./data/zookeeper/3/data/:/var/lib/zookeeper/data
      - ./data/zookeeper/3/log/:/var/lib/zookeeper/log
    restart: always

  kafka-1:
    image: confluentinc/cp-kafka:5.5.1
    volumes:
      - ./data/kafka/1/:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181,zookeeper-2:32181,zookeeper-3:42181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INNER://kafka-1:9092,LISTENER_LOCALHOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INNER:PLAINTEXT,LISTENER_LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INNER
    ports:
      - 19092:19092
    restart: always

  kafka-2:
    image: confluentinc/cp-kafka:5.5.1
    volumes:
      - ./data/kafka/2/:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181,zookeeper-2:32181,zookeeper-3:42181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INNER://kafka-2:9092,LISTENER_LOCALHOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INNER:PLAINTEXT,LISTENER_LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INNER
    ports:
      - 29092:29092
    restart: always

  kafka-3:
    image: confluentinc/cp-kafka:5.5.1
    volumes:
      - ./data/kafka/3/:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181,zookeeper-2:32181,zookeeper-3:42181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INNER://kafka-3:9092,LISTENER_LOCALHOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INNER:PLAINTEXT,LISTENER_LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INNER
    ports:
      - 39092:39092
    restart: always

  kafka-connect:
    build:
      context: .
      dockerfile: docker/kafka-connect/Dockerfile
    working_dir: /home/max/software/projects/Bank-DDD-CQRS-ES
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "accounts"
      CONNECT_CONFIG_STORAGE_TOPIC: "accounts-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "accounts-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "accounts-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_PLUGIN_PATH: /kafka/plugins
    ports:
      - 8083:8083
    volumes:
      - ./data/connect/quickstart/file/:/tmp/quickstart
      - ./data/connect/quickstart/jars:/etc/kafka-connect/jars
    restart: always

  pgadmin:
    image: thajeztah/pgadmin4
    ports:
      - "5050:5050"
    links:
      - db:db
    restart: always
